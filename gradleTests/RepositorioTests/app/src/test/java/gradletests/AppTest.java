/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradletests;

import org.junit.jupiter.api.Test;

import gradletests.App.Libro;
import gradletests.App.Usuario;
import gradletests.App.Usuarios;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.HashMap;

class AppTest {
    @Test void anadirUsuario() {
        App app = new App();
        App.Usuario Usuario1 = app.new Usuario("nombre", "correo");
        App.Usuarios usuarios = app.new Usuarios();
        ArrayList<Usuario> UsuariosTest = new ArrayList<Usuario>();
        UsuariosTest.add(Usuario1);
        //assertTrue(myArraylist.equals(categories));
        assertEquals(true , UsuariosTest.equals(usuarios.anadirUsuario(Usuario1)));
        
    }
    @Test void anadirUsuarioNull() {
        App app = new App();
        App.Usuario usuario = app.new Usuario(null, null);
        App.Usuarios usuarios = app.new Usuarios();
        ArrayList<Usuario> UsuariosTest = new ArrayList<Usuario>();
        UsuariosTest.add(usuario);

        assertEquals(true ,UsuariosTest.equals(usuarios.anadirUsuario(usuario)));
    }
    @Test void eliminarUsuario() {
        App app = new App();
        App.Usuario Usuario1 = app.new Usuario("nombre", "correo");
        App.Usuarios usuarios = app.new Usuarios();
        usuarios.anadirUsuario(Usuario1);
        ArrayList<Usuario> UsuariosTest = new ArrayList<Usuario>();
        UsuariosTest.add(Usuario1);
        UsuariosTest.remove(Usuario1);
        //assertTrue(myArraylist.equals(categories));
        assertEquals(true , UsuariosTest.equals(usuarios.eliminarUsuario("nombre")));
    }
    @Test void eliminarUsuarioNull() {
        App app = new App();
        App.Usuario Usuario1 = app.new Usuario(null, null);
        App.Usuarios usuarios = app.new Usuarios();
        usuarios.anadirUsuario(Usuario1);
        ArrayList<Usuario> UsuariosTest = new ArrayList<Usuario>();
        UsuariosTest.add(Usuario1);
        UsuariosTest.remove(Usuario1);
        //assertTrue(myArraylist.equals(categories));
        assertEquals(true , UsuariosTest.equals(usuarios.eliminarUsuario(null)));
    }

    //LIBROS

    @Test void anadirLibro() {
        App app = new App();
        App.Libro Libro1 = app.new Libro("nombre", "autor");
        App.Biblioteca biblioteca = app.new Biblioteca();
        ArrayList<Libro> bibliotecaTest = new ArrayList<Libro>();
        bibliotecaTest.add(Libro1);
        assertEquals(true , bibliotecaTest.equals(biblioteca.anadirLibros(Libro1)));  
    }
    @Test void anadirLibroNull() {
        App app = new App();
        App.Libro Libro1 = app.new Libro(null, null);
        App.Biblioteca biblioteca = app.new Biblioteca();
        ArrayList<Libro> bibliotecaTest = new ArrayList<Libro>();
        bibliotecaTest.add(Libro1);
        assertEquals(true , bibliotecaTest.equals(biblioteca.anadirLibros(Libro1)));  
    }
    @Test void eliminarLibro() {
        App app = new App();
        App.Libro Libro1 = app.new Libro("nombre", "autor");
        App.Biblioteca biblioteca = app.new Biblioteca();
        ArrayList<Libro> bibliotecaTest = new ArrayList<Libro>();
        bibliotecaTest.add(Libro1);
        bibliotecaTest.remove(Libro1);
        biblioteca.anadirLibros(Libro1);
        assertEquals(true , bibliotecaTest.equals(biblioteca.eliminarLibros("nombre")));  
    }
    @Test void eliminarLibroNull() {
        App app = new App();
        App.Libro Libro1 = app.new Libro(null, null);
        App.Biblioteca biblioteca = app.new Biblioteca();
        ArrayList<Libro> bibliotecaTest = new ArrayList<Libro>();
        bibliotecaTest.add(Libro1);
        bibliotecaTest.remove(Libro1);
        biblioteca.anadirLibros(Libro1);
        assertEquals(true , bibliotecaTest.equals(biblioteca.eliminarLibros(null)));  
    }
    @Test void verLibros() {
        App app = new App();
        App.Libro Libro1 = app.new Libro("nombre", "autor");
        App.Biblioteca biblioteca = app.new Biblioteca();
        ArrayList<Libro> bibliotecaTest = new ArrayList<Libro>();
        bibliotecaTest.add(Libro1);
        biblioteca.anadirLibros(Libro1); 
        assertEquals(bibliotecaTest.get(0), biblioteca.llistar_llibres().get(0));  
    }
    @Test void anadirLibroLeido() {
        App app = new App();
        App.Libro Libro1 = app.new Libro("nombre", "autor");
        App.Biblioteca biblioteca = app.new Biblioteca();
        ArrayList<Libro> bibliotecaTest = new ArrayList<Libro>();
        App.Usuario Usuario1 = app.new Usuario("nombre", "correo");
        HashMap<Object, ArrayList<Libro>> leidos = new HashMap<>();
        HashMap<Object, ArrayList<Libro>> leidosTest = new HashMap<>();
        bibliotecaTest.add(Libro1);
        leidosTest.put(Usuario1, bibliotecaTest);
        leidos.put(Usuario1, biblioteca.anadirLibros(Libro1));
        assertEquals(true , leidosTest.equals(leidos));  
    }
    @Test void verLibroLeido() {
        App app = new App();
        App.Libro Libro1 = app.new Libro("nombre", "autor");
        App.Biblioteca biblioteca = app.new Biblioteca();
        ArrayList<Libro> bibliotecaTest = new ArrayList<Libro>();
        App.Usuario Usuario1 = app.new Usuario("nombre", "correo");
        HashMap<Object, ArrayList<Libro>> leidos = new HashMap<>();
        HashMap<Object, ArrayList<Libro>> leidosTest = new HashMap<>();
        bibliotecaTest.add(Libro1);
        leidosTest.put(Usuario1, bibliotecaTest);
        leidos.put(Usuario1, biblioteca.anadirLibros(Libro1));
        assertEquals(leidosTest.get(Usuario1), leidos.get(Usuario1));  
    }
}

